IOC
	(Inversion of Control)：其思想是反转资源获取的方向. 传统的资源查找方式要求组件向容器发起请求查找资源. 作为回应, 容器适时的返回资源. 而应用了 IOC 之后, 则是容器主动地将资源推送给它所管理的组件, 组件所要做的仅是选择一种合适的方式来接受资源. 这种行为也被称为查找的被动形式。


1. 默认情况下, IOC 容器中的 bean 是单例的! 若对象是单例的, 则在创建 IOC 容器时即创建 bean 的实例, 并对 bean 的属性进行初始化. 
		2. 可以通过 bean 的 scope 属性来修改 bean 的作用域. 若取值为 prototype, 则 bean 为原型的: 每次向容器获取实例, 得到的都是一个新的对象.
		而且, 不在创建 IOC 容器时创建 bean 的实例了. 
		3. IOC 容器中 bean 的生命周期: 
		3.1 一般地, 讨论 bean 的生命周期, 是建立在 bean 是单例的基础上的. 
		3.2 可以为 bean 指定 init 和 destroy 方法
		3.3 还可以通过 bean 的后置处理器来更加丰富 bean 的生命周期方法(面试时.).
	-->
	<bean id="helloWorld" 
		class="com.atguigu.spring.helloworld.HelloWorld" 
		scope="singleton"
		init-method="init"
		destroy-method="destroy">
		<property name="userName" value="atguigu"></property>
	</bean>


DI

	(Dependency Injection) ― IOC 的另一种表述方式：即组件以一些预先定义好的方式(例如: setter 方法)接受来自如容器的资源注入. 相对于 IOC 而言，这种表述更直接。

Bean的配置。
    class：bean的全类名通过反射的方式在IOC容器创建Bean。所以Bean中必须有午餐构造器
    id：表示容器中的Bean。id唯一，若不指定，Spring自动将权限限定性类名作为Bean的名字。

		<!-- 配置 bean -->
	<bean id="dao5" class="com.atguigu.spring.ref.Dao"></bean>

	<bean id="service" class="com.atguigu.spring.ref.Service">
		<!-- 通过 ref 属性值指定当前属性指向哪一个 bean! -->
		<property name="dao" ref="dao5"></property>
	</bean>


在 Spring IOC 容器读取 Bean 配置创建 Bean 实例之前, 必须对它进行实例化. 只有在容器实例化后，才可以从 IOC 容器里获取 Bean 实例并使用.Spring 提供了两种类型的 IOC 容器实现. 
--------BeanFactory: IOC 容器的基本实现.
--------ApplicationContext: 提供了更多的高级特性. 是 BeanFactory 的子接口.调用getBean（）方法获取。
	ApplicationContext 的主要实现类：
		---ClassPathXmlApplicationContext：从 类路径下加载配置文件
		---FileSystemXmlApplicationContext: 从文件系统中加载配置文件。
ConfigurableApplicationContext 扩展于 ApplicationContext，新增加两个主要方法：
		refresh() 和 close()，
 让 ApplicationContext 具有启动、刷新和关闭上下文的能力ApplicationContext 在初始化上下文时就实例化所有单例的 Bean。

WebApplicationContext 是专门为 WEB 应用而准备的，它允许从相对于 WEB 根目录的路径中完成初始化工作

BeanFactory 是 Spring 框架的基础设施，面向 Spring 本身；ApplicationContext 面向使用 Spring 框架的开发者，

几乎所有的应用场合都直接使用 ApplicationContext 而非底层的 BeanFactory无论使用何种方式, 配置文件时相同的.

2.依赖注入
  	->属性注入
		通过setter方法注入Bean的属性或依赖对象
		属性注入使用 <property> 元素, 使用 name 属性指定 Bean 的属性名称，
				value 属性或 <value> 子节点指定属性值 	->构造器注入
		要求: 在 Bean 中必须有对应的构造器.
			若一个 bean 有多个构造器, 如何通过构造器来为 bean 的属性赋值 -->
			可以根据 index 和 value 进行更加精确的定位. (了解)
 			若字面值中包含特殊字符, 则可以使用 DCDATA 来进行赋值. (了解)	->工厂方法注入（很少使用，不推荐）
3.引用其它 Bean	在 Bean 的配置文件中, 可以通过 <ref> 元素或 ref  属性为 Bean 的属性或构造器参数指定对 Bean 的引用. 也可以在属性或构造器里包含 Bean 的声明, 这样的 Bean 称为内部 Bean。

4.null 值和级联属性
	<bean id="action" class="com.atguigu.spring.ref.Action">
		<property name="service" ref="service2"></property>
		<!-- 设置级联属性(了解) -->
		<property name="service.dao.dataSource" value="DBCP2"></property>
	</bean>
	
	<bean id="dao2" class="com.atguigu.spring.ref.Dao">
		<!-- 为 Dao 的 dataSource 属性赋值为 null, 若某一个 bean 的属性值不是 null, 使用时需要为其设置为 null(了解) -->
		<property name="dataSource"><null/></property>
	</bean>	


5.集合属性
<!-- 装配集合属性 -->
	<bean id="user" class="com.atguigu.spring.helloworld.User">
		<property name="userName" value="Jack"></property>
		<property name="cars">
			<!-- 使用 list 元素来装配集合属性 -->
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
			</list>
		</property>
	</bean>



<!-- 声明集合类型的 bean -->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	
	<bean id="user2" class="com.atguigu.spring.helloworld.User">
		<property name="userName" value="Rose"></property>
		<!-- 引用外部声明的 list -->
		<property name="cars" ref="cars"></property>
	</bean>
	
	<bean id="user3" class="com.atguigu.spring.helloworld.User"
		p:cars-ref="cars" p:userName="Titannic"></bean>

6.自动装配。
	在 <bean> 的 autowire 属性里指定自动装配的模式
	--byType(根据类型自动装配): 若 IOC 容器中有多个与目标 Bean 类型一致的 Bean. 在这种情况下, 		Spring 将无法判定哪个 Bean 最合适该属性, 所以不能执行自动装配.

	--byName(根据名称自动装配): 必须将目标 Bean 的名称和属性名设置的完全相同.
	--constructor(通过构造器自动装配): 当 Bean 中存在多个构造器时, 此种自动装配方式将会很复杂. 			不推荐使用


7.Bean之间的关系
  	-->继承
		子 Bean 从父 Bean 中继承配置, 包括 Bean 的属性配置子 Bean 也可以覆盖从父 Bean 继承			过来的配置
		父 Bean 可以作为配置模板, 也可以作为 Bean 实例.
 
		若只想把父 Bean 作为模板, 可以设置<bean> 的abstract 属性为 true, 这样 Spring 将不				会实例化这个 Bean并不是 <bean> 元素里的所有属性都会被继承. 比如: autowire, 			abstract 等.
		也可以忽略父Bean 的 class 属性, 让子 Bean 指定自己的类, 而共享相同的属性配置. 
			但此时 abstract 必须设为 true

		<!-- bean 的配置能够继承吗 ? 使用 parent 来完成继承 -->	
			<bean id="user4" parent="user" p:userName="Bob"></bean>
	
			<bean id="user6" parent="user" p:userName="维多利亚"></bean>

	-->依赖
		Spring 允许用户通过 depends-on 属性设定 Bean 前置依赖的Bean，前置依赖的 Bean 会在			本 Bean 实例化之前创建好
	
		如果前置依赖于多个 Bean，则可以通过逗号，空格或的方式配置an 的名称。
		<bean id="user5" parent="user" p:userName="Backham" depends-on="user6"></bean>




8.Bean的作用域(singleton, prototype:,request,session)
	-->在 Spring 中, 可以在 <bean> 元素的 scope 属性里设置 Bean 的作用域.

	-->默认情况下, Spring 只为每个在 IOC 容器里声明的 Bean 创建唯一一个实例, 整个 IOC 容器范围内都能共享该实例：所有后续的 getBean() 调用和 Bean 引用都将返回这个唯一的 Bean 实例.该作用域被称为 singleton, 它是所有 Bean 的默认作用域. 	
	<!-- 默认情况下 bean 是单例的! -->
	<!-- 但有的时候, bean 就不能使单例的. 例如: Struts2 的 Action 就不是单例的! 可以通过 scope 属性来指定 bean 的作用域 -->

	<!--  
		prototype: 原型的. 每次调用 getBean 方法都会返回一个新的 bean. 且在第一次调用 getBean 方法时才创建实例
		singleton: 单例的. 每次调用 getBean 方法都会返回同一个 bean. 且在 IOC 容器初始化时即创建 bean 的实例. 默认值 
	-->
	<bean id="dao2" class="com.atguigu.spring.ref.Dao" scope="prototype"></bean>
	
	<bean id="service" class="com.atguigu.spring.ref.Service" autowire="byName"></bean>
	
	<bean id="action" class="com.atguigu.spring.ref.Action" autowire="byType"></bean>
	


9.SpEL：字面量

	字面量的表示：
		整数：<property name="count" value="#{5}"/>		小数：<property name="frequency" value="#{89.7}"/>		科学计数法：<property name="capacity" value="#{1e4}"/>		String可以使用单引号或者双引号作为字符串的定界符号：<property name=“name” value="#{'Chuck'}"/> 或 <property name='name' value='#{"Chuck"}'/>
		Boolean：<property name="enabled" value="#{false}"/>


<!-- 测试 SpEL: 可以为属性进行动态的赋值(了解) -->
	<bean id="girl" class="com.atguigu.spring.helloworld.User">
		<property name="userName" value="周迅"></property>
	</bean>
	
	<bean id="boy" class="com.atguigu.spring.helloworld.User" init-method="init" destroy-method="destroy">
		<property name="userName" value="高胜远"></property>
		<property name="wifeName" value="#{girl.userName}"></property>
	</bean>
	
	<!-- 配置 bean 后置处理器: 不需要配置 id 属性, IOC 容器会识别到他是一个 bean 后置处理器, 并调用其方法 -->
	<bean class="com.atguigu.spring.ref.MyBeanPostProcessor"></bean>

	

10。IOC 容器中 Bean 的生命周期方法。
	Spring IOC 容器对 Bean 的生命周期进行管理的过程:		
		--通过构造器或工厂方法创建 Bean 实例	
		--为 Bean 的属性设置值和对其他 Bean 的引用	
		--调用 Bean 的初始化方法		
		--Bean 可以使用了
		--当容器关闭时, 调用 Bean 的销毁方法
	在 Bean 的声明里设置 init-method 和 destroy-method 属性, 为 Bean 指定初始化和销毁方法.




		Bean 后置处理器允许在调用初始化方法前后对 Bean 进行额外的处理.
		Bean 后置处理器对 IOC 容器里的所有 Bean 实例逐一处理, 而非单一实例. 其典型应用是: 			检查 Bean 属性的正确性或根据特定的标准更改 Bean 的属性.

		对Bean 后置处理器而言, 需要实现BeanPostProcessor接口. 在初始化方法被调用前后, Spring 将把每个 Bean 的实例分别传递给上述接口的以下两个方法:postProcessBeforeInitialization ，postProcessAfterInitialization方法创建 Bean 后置处理器

添加 Bean 后置处理器后 Bean 的生命周期。
		--通过构造器或工厂方法创建 Bean 实例
		--为 Bean 的属性设置值和对其他 Bean 的引用
		--将 Bean 实例传递给 Bean 后置处理器的 postProcessBeforeInitialization 方法		--调用 Bean 的初始化方法
		--将 Bean 实例传递给 Bean 后置处理器的 postProcessAfterInitialization方法
		--Bean 可以使用了		--当容器关闭时, 调用 Bean 的销毁方法


<!-- 通过工厂方法的方式来配置 bean -->
	<!-- 1. 通过静态工厂方法: 一个类中有一个静态方法, 可以返回一个类的实例(了解) -->
	<!-- 在 class 中指定静态工厂方法的全类名, 在 factory-method 中指定静态工厂方法的方法名 -->
	<bean id="dateFormat" class="java.text.DateFormat" factory-method="getDateInstance">
		<!-- 可以通过 constructor-arg 子节点为静态工厂方法指定参数 -->
		<constructor-arg value="2"></constructor-arg>
	</bean>
	
	<!-- 2. 实例工厂方法: 先需要创建工厂对象, 再调用工厂的非静态方法返回实例(了解) -->
	<!-- ①. 创建工厂对应的 bean -->
	<bean id="simpleDateFormat" class="java.text.SimpleDateFormat">
		<constructor-arg value="yyyy-MM-dd hh:mm:ss"></constructor-arg>
	</bean>
	
	<!-- ②. 有实例工厂方法来创建 bean 实例 -->
	<!-- factory-bean 指向工厂 bean, factory-method 指定工厂方法(了解) -->
	<bean id="datetime" factory-bean="simpleDateFormat" factory-method="parse">
		<!-- 通过 constructor-arg 执行调用工厂方法需要传入的参数 -->
		<constructor-arg value="1990-12-12 12:12:12"></constructor-arg>
	</bean>
	
	<!-- 配置通过 FactroyBean 的方式来创建 bean 的实例(了解) -->
	<bean id="user" class="com.atguigu.spring.ref.UserBean"></bean>
	











